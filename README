IPUDP encapsulation module

CURRENT STATUS:
ipudp module and the related configuration tool ipdup_conf can be used to crete
virtual network devices that perform ip-udp encapsulation. Packets routed through
this network interfaces will be encapsulated in IP/UDP headers and sent to the 
proper tunnel endpoint. 
Ipudp module supports both IPv4 and IPv6 encapsulation. This means that packets
can be encapsulated within IPv4/UDP and IPv6/UDP headers.

As to the current status, ipudp module provides 2 virtual devices modes:
1) FIXED mode: a single ipudp (v4 or v6) tunnel is bound to a virutal ipudp device.
This type of virtual interface is dobule-stack, in the sense that we can assign both
IPv4 and IPv6 address to the device and use it for both IPv4 and IPv6 applications.

2) MULTI_V4 mode: multiple ipudp (v4 or v6) tunnels can be bound to this type of 
virtual interface. For each encapsulated packet, the proper tunnel is choosen by a set
of rules that bind the destination IP address of the inner packet, with a given tunnel.
For this interface type, only IPv4 traffic is supported.

The module can be extended to support other encapsulation modes with different i
forwarding policies.

Ipudp module comes with ipudp_conf a configuration tool used to create, remove and list
virutal devices, add to add, remove and list tunnels and rules. 

IMPORTANT:
the module is at a very initial status and it hasn't been completly tested.
I'm not 100% sure that it won't freeze your PC, so try it on virtual mahcines...

#####################################################################################

GET THE CODE:

Donwload the code from a SVN repository:
# svn co https://svn.ninux.org/svn/ninuxdeveloping/ipudp  

Build and load the module:
# cd ipdup/ipudp_mod
# make
# insomd ipudp.ko

Build the configuration program:
# cd ipdup/ipudp_conf
# make

#####################################################################################

IPUDP_CONF SMALL GUIDE

usage: 
ipudp_conf -cmd_arg <cmd_opt>
Possible cmd_arg: ADD (-a) DEL (-d) LIST (-l)\n"
Possible cmd_opt: args: dev, tun, rule, tsa

With ipudp_conf it is possible to: add, remome and list the set of IPUDP virtual 
interfaces, the tunnels and the rules registered in the module.

In details:

(1) Add a virtual ipudp device:
	ipudp_conf -a dev -N <name> -M <mode> -P <v4|v6>

Possibile [non mandatory] options:
-N <name>: 	set the name of the virtual device.
			if -N is missing, the default name is ipudp#n where #n is the
			first available index starting from 0

-M <mode>: 	set the virtual device mode (default "fixed").
			Another possible value is multi_v4 (to be extended).
			The idea is to have different encapsulation mode and forwarding policies.

			FIXED mode: a single ip/udp tunnel is bound to a given device.

			MULTI_V4: more then one ip/udp tunnel can be bound to a device. 
			The tunnel for a given packet is choosen from a set of rules that binds 
			the tunnel to a destination ipv4 address.. (only for IPv4 traffic)

-P <v4|v6>: set the ip version of the outer header. Can be either v4 or v6.


(2) Delete a virtual ipudp device:
		ipudp_conf -d dev -N <dev_name>

-N <name>: 	set the name of the virtual device to remove.


(3) Add a ipdup tunnel to a virtual device
	ipudp_conf -a tun -N <name> -P <v4|v6> -D <ipdst> -S <ipsrc> \
						-L <local> -R <remote> -U <dev>

-N <name>:	set the name of the virtual interface on which to bind a tunnel.

-P <v4|v6>:	set the ip version for the tunnel (that has to be same as the one the
			ipudp virtual device the tunnel is bound to)

-D <ipdst>:	set the IP address the remote tunnel end point. The ip version is 
			expected to be the one specified with -P option.

-S <ipsrc>:	set the IP address the local tunnel end point. The ip version is 
			expected to be the one specified with -P option. This option can be 
			omitted when -U is used.


-U <dev>:	set the network device used to send IP/UDP encapsulated packets. When this
			option is used, the IP source address of the tunnel is chosen acconringly
			to the IP configuration of the underlying network device.

-L <port>:	set the local UDP port for the tunnel.

-R <port>:	set the remote UDP port for the tunnel.


note: 	(1) when a tunnel is added a unique identifier is assocaited to the tunnel.
		Use this "tid" (option -I) to delete a tunnel (see later..)
		(2) when a tunnel is added a TSA (tunnel server address) is automatically added. 
		To prevent other application to bind on UDP ports used by IP/UDP tunnels, a 
		UPD socket is bound to the local port. The socket inode is used as unique 
		identifier for the TSA. 

(4) Delete a tunnel
	ipudp_conf -d tun -N <viface_name> -I <tid>
	
-N <name>:	set the name of the virtual interface from which to delete a tunnel.
-I <tid>:	set the unique tunnel id of the tunnel to delete.

note: when a tunnel is deleted, the related TSA is automatically deleted when no other
		tunnels are referencing this TSA.

(5) Add rule to a ipudp MULTI_V4 device:
	ipudp_conf -a rule -N <name> -M multi_v4 -D <ipdst> -I <tid>

	-N <name>:	set the name of the virtual interface to which to add a rule.

	-M <mode>:	specify the virtual interface mode, and thus the format of the rule.
				In this case is set to multi_v4.

	-D <ipdst>: indicates to match the packets to be encapsulated if the IPv4 
				destination address is equal to <ipdest>.

	-I <tid>:	the tunnel id of the  tunnel tergeted by the rule.


(6) List ipudp devices;
	ipudp_conf -L dev

(7) List ipudp tunnel for a given device;
	ipudp_conf -L tun -N <dev_name>

(8) List rules for a given device;
	ipudp_conf -L tsa -N <dev_name>


#####################################################################################

EXAMPLES


### TEST 1 
# 1 IPv4/UDP and 1 IPv6/UDP tunnel betwen 2 hosts on the same LAN
# ipv4 tun from PC1 to PC2 the source port is 50000 and the remote is 60000
# ipv6 tun from PC1 to PC2 the source port is 55000 and the remote is 65000

#########################################
#PC1 configuration
#interfaces:
#eth0: ipv4 10.0.0.1/24, ipv6 2001::1/64
#########################################

#add v4 device - it will be ipudp0
ipudp_conf -a dev

#add v6 device - it will be ipudp1
ipudp_conf -a dev -P v6

#add v4 tunnel to ipudp0
ipudp_conf -a tun -S 10.0.0.1 -D 10.0.0.3 -L 50000 -R 60000 -N ipudp0

#add v6 tunnel to ipudp1
ipudp_conf -a tun -P v6 -S 2001::1 -D 2001::3 -L 55000 -R 65000 -N ipudp1

#configure virtual devices
ifconfig ipdup0 192.168.0.1
ifconfig ipdup1 192.168.100.1

#Try ipv4 tunnel
#put netcat in listening
nc6 -l -s 192.168.0.1 -p 9999

#Try ipv6 tunnel
#put netcat in listening
nc6 -l -s 192.168.100.1 -p 9999

#########################################
#PC3 configuration
#interfaces:
#eth0: ipv4 10.0.0.3/24, ipv6 2001::3/64
#########################################

#add v4 device - it will be ipudp0
ipudp_conf -a dev

#add v6 device - it will be ipudp1
ipudp_conf -a dev -P v6

#add v4 tunnel to ipudp0
ipudp_conf -a tun -S 10.0.0.3 -D 10.0.0.1 -L 60000 -R 50000 -N ipudp0 

#add v6 tunnel to ipudp1
ipudp_conf -a tun -P v6 -S 2001::3 -D 2001::1 -L 65000 -R 55000 -N ipudp1

#configure virtual devices
ifconfig ipdup0 192.168.0.3
ifconfig ipdup1 192.168.100.3

#Try ipv4 tunnel
#netcat PC3 
nc 192.168.0.1 9999

#Try ipv6 tunnel
#netcat PC3 
nc 192.168.100.1 10000


###TEST 2
# VPN-like scenario. 1 hub 2 spokes
# VPN: network 192.168.0.0/24
# Since with this example we want to show how to multiplex 
# different tunnels on a single IPUDP virtual device and how to
# set the tunneling rules, for semplicity the spokes and the HUB 
# are on the same LAN. Create a IP/UDP tunnel when one or both hosts 
# are behind NAT is a well known problem that can be solved in many 
# ways. For example we can think to use TINC to open the flow at the 
# NATS and then configuring the IPUDP tunnels with ipudp_conf.
# In this example the spokes will simply configure a direct tunnel
# with the HUB, as in TEST 1. 
# The HUB (with a multi_v4 dev) will decapasulate packets received on 
# registered tunnels and forward them (if not addressed to itself)
# through the proper tunnel, according to the set of forwarding rules
# set with ipudp_conf. 

####################################################
# SPOKE1 configuration
# interfaces:
# eth0: ipv4 23.250.57.86/21
# VPN ipv4 address: 10.0.0.2
# IPUDP tunnel: source port 50000, remote port 60000
#####################################################

#add viface
ipudp_conf -a dev
ifconfig ipudp0 10.0.0.2

#add tunnel
ipudp_conf -a tun -S 23.250.57.86 -D 23.250.57.85 -L 50000 -R 60000 -N ipudp0

###################################################
# SPOKE2 configuration
# interfaces:
# eth0: ipv4 32.250.57.87/24
# VPN ipv4 address: 10.0.0.3
# IPUDP tunnel: source port 50001, remote port 60000
###################################################

#add viface
ipudp_conf -a dev
ifconfig ipudp0 10.0.0.3

#add tunnel
ipudp_conf -a tun -S 23.250.57.87 -D 23.250.57.85 -L 50001 -R 60000 -N ipudp0

#############################
# HUB configuration
# interfaces:
# eth0: ipv4 23.250.57.85/21
# VPN ipv4 address: 10.0.0.1
#############################

#add viface
ipudp_conf -a dev -M multi_v4
ifconfig ipudp0 10.0.0.1

#if not already enabled...
echo 1 > /proc/sys/net/ipv4/ip_forward 

#if you want, you can also disable forwarding for non encapsulated packets.
#iptables -A FORWARD !-i ipudp0 -j DROP

#do this otherwise for any tunneled packet to 10.0.0.x
#HUB will send a ICMP redirect: new nexthop 10.0.0.x
echo 0 > /proc/sys/net/ipv4/conf/ipudp0/send_redirects


#add tunnel - this will have tid = 1
ipudp_conf -a tun -S 23.250.57.85 -D 23.250.57.86 -L 60000 -R 50000 -N ipudp0

#add tunnel - this will have tid = 2
ipudp_conf -a tun -S 23.250.57.85 -D 23.250.57.87 -L 60000 -R 50001 -N ipudp0

#add rules
# vpn host 10.0.0.2 is behind tunnel 1
ipudp_conf -a rule -N ipudp0 -M multi_v4 -D 10.0.0.2 -I 1

# vpn host 10.0.0.3 is behind tunnel 2
ipudp_conf -a rule -N ipudp0 -M multi_v4 -D 10.0.0.3 -I 2 



###TODO

###TEST
# Interaction with TINC

###TEST
# ipudp tunnel between a a host with private address and a server. 
# The server is used like a multiprotol proxy and it forwards 
# IP packets from PC1 to a given CH and viceversa performing decapsulation and 
# encapsuation.

###TEST
# multi-homing and balance loading

